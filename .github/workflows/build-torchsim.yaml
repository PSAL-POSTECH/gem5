name: Build and Release Gem5 for torchsim

on:
  push:
    tags:
      - 'v*.*.*'  # Matches version tags like v1.0.0

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Pull Gem5 Prebuilt Dependency Image
        run: |
          docker pull ghcr.io/gem5/ubuntu-22.04_all-dependencies:latest

      - name: Build Gem5
        env:
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace \
          ghcr.io/gem5/ubuntu-22.04_all-dependencies:latest \
          bash -c 'if [ ! -d "gem5" ]; then
              git clone https://${GIT_ACCESS_TOKEN}@github.com/PSAL-POSTECH/gem5.git --branch TorchSim &&
              cd gem5 &&
              scons build/RISCV/gem5.opt -j$(nproc)
            else 
              cd gem5 && git pull
              scons build/RISCV/gem5.opt -j$(nproc)
            fi
          '

      - name: Archive Build Artifacts
        run: |
          mkdir -p release
          cp gem5/build/RISCV/gem5.opt release/
          tar -czvf gem5-release.tar.gz release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gem5-release.tar.gz
          asset_name: gem5-release.tar.gz
          asset_content_type: application/gzip

  trigger:
    name: Trigger build base image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Trigger building base iamge
        run: gh api /repos/PSAL-POSTECH/PyTorchSim/dispatches -f event_type='build_base'
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
